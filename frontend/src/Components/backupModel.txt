import React, { useEffect } from 'react';
import { Modal, Box } from '@mui/material';
import { useState } from 'react';
import { Button } from '@mui/material';
import { TextField } from '@mui/material';
const CRUDModal = ({ open, handleClose, children, columns, model, setModel }) => {

    const [attributes, setAttributes] = useState([]);
    useEffect(() => {
        //Get attributes from model
        const attributes = Object.keys(model);
        setAttributes(attributes);
    }, []);

    useEffect(()=>{
      //  console.log(model.profile);

      //console how many attributes are there in model
        console.log(Object.keys(model.profile).length);
    }, [model])

    return (
        open &&
        <Modal
        open={open}
        onClose={handleClose}
        aria-labelledby="modal-modal-title"
        aria-describedby="modal-modal-description"
        >
        <Box 
        sx={{
            position: 'absolute',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            width: 400,
            bgcolor: 'background.paper',
            boxShadow: 24,
            p: 4,
        }}
        >
            {
                attributes && attributes.map((attribute) => {
                    return (
                        Object.keys(model[attribute]).length > 0 ?
                        Object.keys(model[attribute]).map((subAttribute) => {

                            return (
                                <div key={subAttribute}>
                                    <TextField label={subAttribute} type="text" value={model[attribute][subAttribute]} onChange={(e) => setModel(prev => ({ ...prev, [attribute]: {...model[attribute], [subAttribute]: e.target.value} }))} />
                                </div>
                            )
                        }
                        )
                        
                        :

                        <div key={attribute}>
                       
                            <TextField label={attribute} type="text" value={model[attribute]} onChange={(e) => setModel(prev => ({ ...prev, [attribute]: e.target.value }))} />
                        </div>
                    )
                }
                )
            }


            <Button variant="contained" onClick={handleClose}>save</Button>
        </Box>
        </Modal>
    )
};

export default CRUDModal;